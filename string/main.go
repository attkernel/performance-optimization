package main

import (
	"fmt"
	"strings"
	"unsafe"
)

func StrToSlice(s string) []byte {
	pS := (*[2]uintptr)(unsafe.Pointer(&s))
	pB := [3]uintptr{pS[0], pS[1], pS[1]}
	return *(*[]byte)(unsafe.Pointer(&pB))
}

func SliceToString(b []byte) string {
	pB := (*[3]uintptr)(unsafe.Pointer(&b))
	pS := [2]uintptr{pB[0], pB[1]}
	return *(*string)(unsafe.Pointer(&pS))
}

func main() {
	s := strings.Repeat("abc", 3)
	b := StrToSlice(s)
	s1 := SliceToString(b)
	fmt.Println(b, s1)
}

//未发生逃逸
/*
# command-line-arguments
./main.go:9:6: can inline StrToSlice
./main.go:15:6: can inline SliceToString
./main.go:23:17: inlining call to StrToSlice
./main.go:24:21: inlining call to SliceToString
./main.go:25:13: inlining call to fmt.Println
./main.go:9:17: StrToSlice s does not escape
./main.go:15:20: SliceToString b does not escape
./main.go:25:13: b escapes to heap
./main.go:25:13: s1 escapes to heap
./main.go:25:13: main []interface {} literal does not escape
./main.go:25:13: io.Writer(os.Stdout) escapes to heap
<autogenerated>:1: (*File).close .this does not escape
*/
